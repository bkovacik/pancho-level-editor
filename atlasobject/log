diff --git a/data/atlasMap.yaml b/data/atlasMap.yaml
index abdf379..ae670ef 100644
--- a/data/atlasMap.yaml
+++ b/data/atlasMap.yaml
@@ -1,98 +1,99 @@
-sizeX: 194
-sizeY: 130
-none:
-  begX: 0
-  begY: 1
-  endX: 1
-  endY: 2
-
-black:
-  begX: 0
-  begY: 0
-  endX: 1
-  endY: 1
-
-white:
-  begX: 1
-  begY: 0
-  endX: 2
-  endY: 1
-
-red:
-  begX: 2
-  begY: 0
-  endX: 3
-  endY: 1
-
-orange:
-  begX: 3
-  begY: 0
-  endX: 4
-  endY: 1
-
-yellow:
-  begX: 4
-  begY: 0
-  endX: 5
-  endY: 1
-
-green:
-  begX: 5
-  begY: 0
-  endX: 6
-  endY: 1
-
-blue:
-  begX: 6
-  begY: 0
-  endX: 7
-  endY: 1
-
-indigo:
-  begX: 7
-  begY: 0
-  endX: 8
-  endY: 1
-
-violet:
-  begX: 8
-  begY: 0
-  endX: 9
-  endY: 1
-
-test:
-  begX: 0
-  begY: 0
-  endX: 32
-  endY: 32
-
-test3:
-  begX: 32
-  begY: 0
-  endX: 64
-  endY: 32
-
-background:
-  begX: 65
-  begY: 1
-  endX: 193
-  endY: 129
-
-lifefull:
-  begX: 0
-  begY: 32
-  endX: 32
-  endY: 64
-
-lifehalf:
-  begX: 32
-  begY: 32
-  endX: 64
-  endY: 64
-
-lifeempty:
-  begX: 0
-  begY: 64
-  endX: 32
-  endY: 96
+sizex: 194
+sizey: 130
+sprites:
+  none:
+    begx: 0
+    begy: 1
+    endx: 1
+    endy: 2
+
+  black:
+    begx: 0
+    begy: 0
+    endx: 1
+    endy: 1
+
+  white:
+    begx: 1
+    begy: 0
+    endx: 2
+    endy: 1
+
+  red:
+    begx: 2
+    begy: 0
+    endx: 3
+    endy: 1
+
+  orange:
+    begx: 3
+    begy: 0
+    endx: 4
+    endy: 1
+
+  yellow:
+    begx: 4
+    begy: 0
+    endx: 5
+    endy: 1
+
+  green:
+    begx: 5
+    begy: 0
+    endx: 6
+    endy: 1
+
+  blue:
+    begx: 6
+    begy: 0
+    endx: 7
+    endy: 1
+
+  indigo:
+    begx: 7
+    begy: 0
+    endx: 8
+    endy: 1
+
+  violet:
+    begx: 8
+    begy: 0
+    endx: 9
+    endy: 1
+
+  test:
+    begx: 0
+    begy: 0
+    endx: 32
+    endy: 32
+
+  test3:
+    begx: 32
+    begy: 0
+    endx: 64
+    endy: 32
+
+  background:
+    begx: 65
+    begy: 1
+    endx: 193
+    endy: 129
+
+  lifefull:
+    begx: 0
+    begy: 32
+    endx: 32
+    endy: 64
+
+  lifehalf:
+    begx: 32
+    begy: 32
+    endx: 64
+    endy: 64
+
+  lifeempty:
+    begx: 0
+    begy: 64
+    endx: 32
+    endy: 96
 
diff --git a/data/qml/pancholeveleditor.qml b/data/qml/pancholeveleditor.qml
index 329d304..cf70d1c 100644
--- a/data/qml/pancholeveleditor.qml
+++ b/data/qml/pancholeveleditor.qml
@@ -123,13 +123,55 @@ ApplicationWindow {
                 var ctx = canvas.getContext('2d');
                 ctx.save();
 
+                drawGrid(32, 4);
+
                 for (var i = 0; i < lc.objectsLength(); i++) {
-                  ctx.drawImage('../atlas.png',
-                    50, 50, 32, 32,
-                    lc.objectsG(i).posX+lc.sizeX/2,
-                    -lc.objectsG(i).posY+lc.sizeY/2, 32, 32);
-console.log(-lc.objectsG(i).posY+lc.sizeY/2)
-  }
+                  var objI = lc.objectsG(i);
+                  ctx.drawImage(
+                    '../atlas.png',
+                    objI.spriteX,
+                    objI.spriteY,
+                    objI.sizeX,
+                    objI.sizeY,
+                    objI.posX+lc.sizeX/2,
+                    -objI.posY+lc.sizeY/2, 
+                    objI.cusX,
+                    objI.cusY
+                  );
+                }
+
+                ctx.restore();
+              }
+
+              function drawGrid(space, dashlength) {
+                var ctx = canvas.getContext('2d');
+                var offX = (lc.sizeY/2)%space - space;
+                var offY = (lc.sizeX/2)%space - space;
+                ctx.save();
+
+                ctx.beginPath();
+
+                // horizontal
+                for (var i = offX; i < lc.sizeY; i += space) {
+                  ctx.moveTo(0, i);
+
+                  for (var j = dashlength; j < lc.sizeX; j += dashlength*2) {
+                    ctx.lineTo(j, i);
+                    ctx.moveTo(j+dashlength, i);
+                  }
+                }
+
+                // vertical
+                for (var i = offY; i < lc.sizeX; i += space) {
+                  ctx.moveTo(i, 0);
+
+                  for (var j = dashlength; j < lc.sizeY; j += dashlength*2) {
+                    ctx.lineTo(i, j);
+                    ctx.moveTo(i, j+dashlength);
+                  }
+                }
+
+                ctx.stroke();
 
                 ctx.restore();
               }
diff --git a/gameobject/gameobject.go b/gameobject/gameobject.go
index 2cb3bd4..4bcd7a6 100644
--- a/gameobject/gameobject.go
+++ b/gameobject/gameobject.go
@@ -10,6 +10,14 @@ const SIZE = 32
 type GameObject struct {
   Name, Type string
   PosX, PosY int
+
+  // CusX is size on screen
+  CusX int `yaml:"-"`
+  CusY int `yaml:"-"`
+
+  // SpriteX is position grabbed from Atlas
+  SpriteX int `yaml:"-"`
+  SpriteY int `yaml:"-"`
   SizeX int `yaml:"-"`
   SizeY int `yaml:"-"`
 }
diff --git a/levelcontroller/levelcontroller.go b/levelcontroller/levelcontroller.go
index aa36b4b..8fe0bd9 100644
--- a/levelcontroller/levelcontroller.go
+++ b/levelcontroller/levelcontroller.go
@@ -6,6 +6,9 @@ import (
   "path/filepath"
   "gopkg.in/yaml.v2"
   "pancho-level-editor/gameobject"
+  "pancho-level-editor/spriteobject"
+  "pancho-level-editor/atlasobject"
+//  "fmt"
 )
 
 type LevelController struct {
@@ -14,12 +17,30 @@ type LevelController struct {
   Objects []gameobject.GameObject
 }
 
+type SpriteContainer struct {
+  Sprites map[string]map[string]spriteobject.SpriteObject
+}
+
+type AtlasContainer struct {
+  SizeX, SizeY int
+  Sprites map[string]atlasobject.AtlasObject
+}
+
+type unmarshallable interface {
+  isUnmarshallable() bool
+}
+
+func (lc *LevelController) isUnmarshallable() bool { return true; }
+func (sc *SpriteContainer) isUnmarshallable() bool { return true; }
+func (ac *AtlasContainer)  isUnmarshallable() bool { return true; }
+
 func NewLevelController() *LevelController {
   lc := new(LevelController)
   return lc
 }
 
-func (lc *LevelController) Load(name string) (e error) {
+// reads in file of name unmarshalls to u
+func load(name string, u unmarshallable) (e error) {
   fullpath, err := filepath.Abs(name)
   if err != nil {
     return err
@@ -45,19 +66,53 @@ func (lc *LevelController) Load(name string) (e error) {
     }
     a += scanner.Text() + "\n"
   }
-  err = yaml.Unmarshal([]byte(a), lc);
+  err = yaml.Unmarshal([]byte(a), u);
   if err != nil {
     return err
   }
+
+  return nil
+}
+
+func (lc *LevelController) Load(name string, sname string, aname string) (e error) {
+  err := load(name, lc)
+  if err != nil {
+    return err
+  }
+
+  var sc SpriteContainer
+  err = load(sname, &sc)
+  if err != nil {
+    return err
+  }
+
+  var ac AtlasContainer
+  err = load(aname, &ac)
+  if err != nil {
+    return err
+  }
+
   // change this when object->sprite mapping created
   i := 0
   for i < len(lc.Objects) {
-    lc.Objects[i].SizeX = 32
-    lc.Objects[i].SizeY = 32
+    obj := &lc.Objects[i]
+
+    base := sc.Sprites[obj.Type]["base"]
+    if base.CusX != 0 {
+      obj.CusX = base.CusX
+      obj.CusY = base.CusY
+    }
+
+    aobj := ac.Sprites[base.Sprite]
+    obj.SpriteX = aobj.BegX
+    obj.SpriteY = aobj.BegY
+    obj.SizeX = aobj.EndX - aobj.BegX
+    obj.SizeY = aobj.EndY - aobj.BegY
+
     i++
   }
 
-  return err
+  return nil
 }
 
 func (lc *LevelController) Save(name string) (e error) {
diff --git a/main.go b/main.go
index 993eba3..6fe7cfb 100644
--- a/main.go
+++ b/main.go
@@ -20,7 +20,7 @@ func main() {
 func run() error {
   engine := qml.NewEngine()
 
-  if len(os.Args) < 3 {
+  if len(os.Args) < 4 {
     return errors.New("Needs qml and level filenames to run!")
   }
 
@@ -30,12 +30,12 @@ func run() error {
   }
 
   f := levelcontroller.NewLevelController()
-  err = f.Load(os.Args[2])
+  err = f.Load(os.Args[2], os.Args[3], os.Args[4])
   if err != nil {
     return err
   }
 
-  err = f.Save(os.Args[3])
+  err = f.Save(os.Args[5])
   if err != nil {
     return err
   }
